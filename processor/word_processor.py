from docx import Document
from pathlib import Path
from typing import List, Dict
import re
from utils.utils import normalize_text, DataExporter
from extractors.vietnamese_extractor import VietnamesePatternExtractor


class WordProcessor:
    """X·ª≠ l√Ω Word files"""
    def __init__(self, extractor=None, exporter=None):
        self.extractor = extractor if extractor is not None else VietnamesePatternExtractor()
        self.exporter = exporter if exporter is not None else DataExporter()
    
    def process_file(self, filename: Path) -> List[Dict]:
        """X·ª≠ l√Ω Word file v·ªõi focus v√†o c·∫£ nh√¢n s·ª± v√† ng∆∞·ªùi th√¢n"""
        try:
            doc = Document(filename)
            records = []
            full_text = ""
            
            # ƒê·ªçc to√†n b·ªô vƒÉn b·∫£n
            for para in doc.paragraphs:
                full_text += para.text + "\n"
            
            # Pattern cho security records (format chu·∫©n trong Word)
            # V√≠ d·ª•: "1. Nh√¢n s·ª± H√† Th·ªã Anh H. (Ph√≥ Ban...) c√≥ m·∫π ch·ªìng l√† Ph·∫°m Th·ªã H ‚Äì c√≥ t√†i li·ªáu t·∫°i h·ªì s∆° S169"
            security_pattern = r'(\d+)\.\s*Nh√¢n\s*s·ª±\s+([A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê][^(]+)\s*\(([^)]+)\)\s*c√≥\s+([^‚Äì]+)‚Äì\s*c√≥\s*t√†i\s*li·ªáu\s*t·∫°i\s*h·ªì\s*s∆°\s*([^,\n]+)'
            
            security_matches = re.findall(security_pattern, full_text, re.IGNORECASE | re.MULTILINE)
            
            for match in security_matches:
                stt, person, position, relation_text, file_ref = match
                
                # T·∫°o record cho nh√¢n s·ª± ch√≠nh
                main_record = {
                    'source': str(filename),
                    'type': 'security_record',
                    'name': normalize_text(person.strip()),
                    'position': normalize_text(position.strip()),
                    'relation': normalize_text(relation_text.strip()),
                    'file_reference': file_ref.strip(),
                    'sequence_number': stt
                }
                records.append(main_record)
                
                # X·ª≠ l√Ω th√¥ng tin ng∆∞·ªùi th√¢n t·ª´ relation_text
                # Pattern ƒë·ªÉ tr√≠ch xu·∫•t quan h·ªá v√† t√™n ng∆∞·ªùi th√¢n
                # V√≠ d·ª•: "m·∫π ch·ªìng l√† Ph·∫°m Th·ªã H"
                relative_pattern = r'(m·∫π\sch·ªìng|b·ªë\sch·ªìng|m·∫π\sv·ª£|b·ªë\sv·ª£|v·ª£|ch·ªìng|con\strai|con\sg√°i|anh\sv·ª£|em\sv·ª£|anh\sr·ªÉ|em\sr·ªÉ|anh|ch·ªã|em|b·ªë|m·∫π)\s+(?:l√†\s+)?([A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê][a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë](?:\s+[A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê][a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë])*)'
                
                relative_matches = re.findall(relative_pattern, relation_text, re.IGNORECASE)
                
                for rel_match in relative_matches:
                    relationship_type, relative_name = rel_match
                    
                    # L√†m s·∫°ch t√™n ng∆∞·ªùi th√¢n
                    relative_name = relative_name.strip().rstrip('.')
                    
                    # T·∫°o record cho ng∆∞·ªùi th√¢n
                    if len(relative_name) >= 3:  # ƒê·∫£m b·∫£o t√™n c√≥ √Ω nghƒ©a
                        relative_record = {
                            'source': str(filename),
                            'type': 'relative_record',
                            'name': normalize_text(relative_name),
                            'relationship': normalize_text(relationship_type),
                            'related_to': main_record['name'],
                            'related_to_position': main_record['position'],
                            'file_reference': file_ref.strip(),
                            'sequence_number': stt
                        }
                        records.append(relative_record)
            
            # S·ª≠ d·ª•ng extractor ƒë·ªÉ t√¨m th√™m th√¥ng tin t·ª´ full text
            # ƒêi·ªÅu n√†y s·∫Ω b·∫Øt ƒë∆∞·ª£c c√°c tr∆∞·ªùng h·ª£p kh√¥ng theo format chu·∫©n
            extracted_records = self.extractor.extract_info_from_text(full_text, str(filename))
            
            # Th√™m c√°c records t·ª´ extractor, tr√°nh tr√πng l·∫∑p
            existing_names = set()
            for record in records:
                if record.get('name'):
                    existing_names.add(record['name'].lower())
            
            for ext_record in extracted_records:
                # Ch·ªâ th√™m n·∫øu ch∆∞a c√≥ trong records
                if ext_record.get('name') and ext_record['name'].lower() not in existing_names:
                    records.append(ext_record)
                    existing_names.add(ext_record['name'].lower())
            
            # X·ª≠ l√Ω th√™m c√°c pattern ƒë·∫∑c bi·ªát cho ng∆∞·ªùi th√¢n
            # Pattern cho c√°c c√¢u nh∆∞: "Nguy·ªÖn VƒÉn A c√≥ v·ª£ l√† Tr·∫ßn Th·ªã B"
            general_relative_pattern = r'([A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê][a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]*(?:\s+[A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê][a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]*){1,3})\s+c√≥\s+(m·∫π\s*ch·ªìng|b·ªë\s*ch·ªìng|m·∫π\s*v·ª£|b·ªë\s*v·ª£|v·ª£|ch·ªìng|con\s*trai|con\s*g√°i|anh|ch·ªã|em|b·ªë|m·∫π)\s+(?:l√†\s+)?([A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê][a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]*(?:\s+[A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê][a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]*)*)'
            
            general_matches = re.findall(general_relative_pattern, full_text, re.IGNORECASE)
            
            for g_match in general_matches:
                main_person, relationship, relative_name = g_match
                
                # Ki·ªÉm tra xem ƒë√£ x·ª≠ l√Ω ch∆∞a
                relative_name_clean = normalize_text(relative_name.strip().rstrip('.,;-'))
                main_person_clean = normalize_text(main_person.strip())
                
                # T·∫°o key unique ƒë·ªÉ check tr√πng
                rel_key = f"{relative_name_clean}_{relationship}_{main_person_clean}"
                
                # Ki·ªÉm tra xem ƒë√£ c√≥ record n√†y ch∆∞a
                already_exists = False
                for existing_record in records:
                    if (existing_record.get('name', '').lower() == relative_name_clean.lower() and
                        existing_record.get('relationship', '').lower() == relationship.lower() and
                        existing_record.get('related_to', '').lower() == main_person_clean.lower()):
                        already_exists = True
                        break
                
                if not already_exists and len(relative_name_clean) >= 3:
                    # T·∫°o record cho ng∆∞·ªùi th√¢n
                    relative_record = {
                        'source': str(filename),
                        'type': 'relative_record',
                        'name': relative_name_clean,
                        'relationship': normalize_text(relationship),
                        'related_to': main_person_clean,
                        'raw_text': f"{main_person} c√≥ {relationship} l√† {relative_name}"
                    }
                    records.append(relative_record)
            
            print(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(records)} b·∫£n ghi t·ª´ {filename}")
            
            # Debug: In ra m·ªôt s·ªë record m·∫´u
            if records:
                print("üìã M·∫´u records:")
                for i, record in enumerate(records[:3]):
                    print(f"   {i+1}. Type: {record['type']}, Name: {record.get('name', 'N/A')}")
                    if record['type'] == 'relative_record':
                        print(f"      -> {record.get('relationship', 'N/A')} c·ªßa {record.get('related_to', 'N/A')}")
            
            return records
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc Word {filename}: {e}")
            return []