import pandas as pd
from pathlib import Path
from typing import List, Dict
from utils.utils import normalize_text, DataExporter
from extractors.vietnamese_extractor import VietnamesePatternExtractor
class ExcelProcessor:
    """X·ª≠ l√Ω Excel files"""
    
    def __init__(self, extractor=None, exporter=None):
        self.extractor = extractor if extractor is not None else VietnamesePatternExtractor()
        self.exporter = exporter if exporter is not None else DataExporter()
    
    def process_file(self, filename: Path) -> List[Dict]:
        """Logic t·ª´ extract_excel_data_optimized c·ªßa code g·ªëc"""
        try:
            excel_file = pd.ExcelFile(filename)
            records = []

            for sheet_name in excel_file.sheet_names:
                try:
                    df = pd.read_excel(filename, sheet_name=sheet_name)
                    
                    # T√¨m c√°c c·ªôt theo t√™n c·ª• th·ªÉ
                    nhan_su_col = None
                    vi_tri_col = None
                    than_nhan_col = None
                    
                    # Mapping c√°c t√™n c·ªôt c√≥ th·ªÉ c√≥
                    column_mappings = {
                        'nhan_su': ['nh√¢n s·ª±', 'nhan su', 'personnel', 'staff', 't√™n', 'h·ªç t√™n', 'name'],
                        'vi_tri': ['v·ªã tr√≠ nh√¢n s·ª±', 'vi tri nhan su', 'ch·ª©c v·ª•', 'chuc vu', 'position', 'title'],
                        'than_nhan': ['th√¢n nh√¢n c√≥ t√†i li·ªáu', 'than nhan co tai lieu', 'th√¢n nh√¢n', 'than nhan', 'relative']
                    }
                    
                    # T√¨m c·ªôt t∆∞∆°ng ·ª©ng
                    for col in df.columns:
                        col_lower = str(col).lower().strip()
                        
                        if not nhan_su_col:
                            for keyword in column_mappings['nhan_su']:
                                if keyword in col_lower:
                                    nhan_su_col = col
                                    break
                        
                        if not vi_tri_col:
                            for keyword in column_mappings['vi_tri']:
                                if keyword in col_lower:
                                    vi_tri_col = col
                                    break
                        
                        if not than_nhan_col:
                            for keyword in column_mappings['than_nhan']:
                                if keyword in col_lower:
                                    than_nhan_col = col
                                    break
                    
                    # Debug th√¥ng tin c·ªôt t√¨m th·∫•y
                    print(f"üìä Sheet '{sheet_name}' - T√¨m th·∫•y c·ªôt:")
                    if nhan_su_col:
                        print(f"   üë§ Nh√¢n s·ª±: '{nhan_su_col}'")
                    if vi_tri_col:
                        print(f"   üíº V·ªã tr√≠: '{vi_tri_col}'")
                    if than_nhan_col:
                        print(f"   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Th√¢n nh√¢n: '{than_nhan_col}'")

                    # Group data ƒë·ªÉ x·ª≠ l√Ω merged cells v√† multiple rows cho c√πng nh√¢n s·ª±
                    personnel_data = {}
                    # Pass 1: Thu th·∫≠p t·∫•t c·∫£ d·ªØ li·ªáu
                    for index, row in df.iterrows():
                        # B·ªè qua h√†ng tr·ªëng ho·∫∑c h√†ng header
                        if index == 0 or row.isna().all():
                            continue

                        # L·∫•y th√¥ng tin nh√¢n s·ª±                    
                        current_personnel = None
                        current_position = None
                        current_relatives = None
                        
                        if nhan_su_col and pd.notna(row[nhan_su_col]):
                            personnel_text = str(row[nhan_su_col]).strip()
                            if personnel_text and len(personnel_text) > 2 and personnel_text.lower() not in ['nh√¢n s·ª±', 't√™n', 'h·ªç t√™n', 'name']:
                                current_personnel = normalize_text(personnel_text)
                        
                        if vi_tri_col and pd.notna(row[vi_tri_col]):
                            position_text = str(row[vi_tri_col]).strip()
                            if position_text and len(position_text) > 2:
                                current_position = normalize_text(position_text)
                        
                        if than_nhan_col and pd.notna(row[than_nhan_col]):
                            relatives_text = str(row[than_nhan_col]).strip()
                            if relatives_text and len(relatives_text) > 2:
                                current_relatives = relatives_text
                        
                        # X·ª≠ l√Ω logic grouping
                        if current_personnel:
                            # N√™ÃÅu coÃÅ nh√¢n s∆∞Ã£ m∆°ÃÅi.
                            if current_personnel not in personnel_data:
                                personnel_data[current_personnel] = {
                                    'name': current_personnel,
                                    'position': current_position,
                                    'relatives_info_list': [],
                                    'row_numbers': []
                                }
                            else:
                                # C·∫≠p nh·∫≠t position n·∫øu ch∆∞a c√≥ ho·∫∑c row hi·ªán t·∫°i c√≥ position
                                if current_position and not personnel_data[current_personnel]['position']:
                                    personnel_data[current_personnel]['position'] = current_position

                            # Th√™m th√¥ng tin th√¢n nh√¢n
                            if current_relatives:
                                personnel_data[current_personnel]['relatives_info_list'].append(current_relatives)
                                personnel_data[current_personnel]['row_numbers'].append(index + 1)

                        elif current_relatives and personnel_data:
                            # Kh√¥ng coÃÅ nh√¢n s∆∞Ã£ m∆°ÃÅi, nh∆∞ng coÃÅ th√¥ng tin cuÃâa nh√¢n th√¢n
                            # GaÃÅn cho nh√¢n s∆∞Ã£ g√¢ÃÄn nh√¢ÃÅt
                            last_personnel = list(personnel_data.keys())[-1] if personnel_data else None
                            if last_personnel:
                                personnel_data[last_personnel]['relatives_info_list'].append(current_relatives)
                                personnel_data[last_personnel]['row_numbers'].append(index + 1)
                    
                    # Pass 2: T·∫°o records t·ª´ personnel_data
                    for personnel_name, personnel_info in personnel_data.items():
                        main_record = {
                            'source': f"{filename}#{sheet_name}",
                            'type': 'excel_personnel',
                            'name': personnel_info['name'],
                            'row_numbers': personnel_info['row_numbers']
                        }
                        
                        if personnel_info['position']:
                            main_record['position'] = personnel_info['position']
                        
                        # G√¥p th√¥ng tin th√¢n nh√¢n
                        if personnel_info['relatives_info_list']:
                            all_relatives_info = ' | '.join(personnel_info['relatives_info_list'])
                            main_record['relatives_info'] = all_relatives_info
                        
                            # TriÃÅch xu√¢ÃÅt th√¥ng tin th√¢n nh√¢n
                            all_relative_names = set()
                            all_family_relationships = []

                            for relatives_text in personnel_info['relatives_info_list']:
                                # TriÃÅch xu√¢ÃÅt t√™n th√¢n nh√¢n
                                relative_names = self.extractor._extract_relative_names(relatives_text)
                                all_relative_names.update(relative_names)

                                # Trichs xu√¢ÃÅt m·ªëi quan h·ªá gia ƒë√¨nh
                                family_relationships = self.extractor._extract_family_relationships(relatives_text)
                                all_family_relationships.extend(family_relationships)
                            
                            if all_relative_names:
                                main_record['relative_names'] = list(all_relative_names)
                            if all_family_relationships:
                                main_record['family_relationships'] = all_family_relationships
                            
                            main_record['relatives_count'] = len(personnel_info['relatives_info_list'])

                        records.append(main_record)

                        # TaÃ£o record cho t·ª´ng th√¢n nh√¢n
                        if main_record.get('family_relationships'):
                            for rel_info in main_record['family_relationships']:
                                rel_record = {
                                    'source': f"{filename}#{sheet_name}",
                                    'type': 'excel_relative',
                                    'name': rel_info['name'],
                                    'relationship': rel_info['relationship'],
                                    'related_to': main_record['name'],
                                    'related_to_position': main_record.get('position', ''),
                                    'row_numbers': personnel_info['row_numbers'],
                                    'relatives_info': all_relatives_info,
                                    'raw_relationship_text': rel_info['raw_text']
                                }
                                records.append(rel_record)
                    
                    # Method 2: Full text search n·∫øu kh√¥ng t√¨m th·∫•y c·ªôt chu·∫©n
                    if not nhan_su_col and not vi_tri_col and not than_nhan_col:
                        print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y c·ªôt chu·∫©n, s·ª≠ d·ª•ng full text extraction")
                        full_text = df.to_string()
                        extracted_records = self.extractor.extract_info_from_text(full_text, f"{filename}#{sheet_name}")
                        records.extend(extracted_records)
                
                except Exception as e:
                    print(f"L·ªói khi ƒë·ªçc sheet '{sheet_name}': {e}")
                    continue
            print(f"‚úÖ ƒê√£ x·ª≠ l√Ω {len(records)} b·∫£n ghi t·ª´ file {filename}")
            return records
            
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc Excel {filename}: {e}")
            return []
